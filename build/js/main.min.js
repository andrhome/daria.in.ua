"use strict";var app={},BASE_URL="templates/",homeTemplateUrl=BASE_URL+"home.html";$(document).ready(function(){function t(){!function(){AOS.init({easing:"ease"})}(),function(){function t(t){var o=$("#header");if(0!==t.length){var n=t.offset().top;$(window).scrollTop()>=n?o.addClass("fixed"):o.removeClass("fixed")}}$(window).scroll(function(){t($("#mainTitle")),t($(".fixed-header-flag"))})}(),function(){function t(t){t<10?e.text("0"+t):e.text(t)}function o(){var t=$(c[0]).data("name"),o=$(c[0]).data("number");e.text("0"+o),a.text(t)}function n(e){if($(c[e]).offset()){var i=$(c[e]).offset().top-250;if($(window).scrollTop()>i){var r=$(c[e]).data("name");t($(c[e]).data("number")),a.text(r),n(e+1)}}$(window).scrollTop()<f&&o()}$(window).on("scroll",function(){n(1)});var e=$("#currentSection"),a=$("#sectionName"),i=$("#sectionCount"),c=$(".site-section"),r=c.length,f=$(c[0]).height();!function(){$(window).scrollTop()>0&&$(window).scrollTop()>f?$.each(c,function(t,o){var n=$(o).offset().top;if(t+1<c.length){var i=$(c[t+1]).offset().top;if(n<=$(window).scrollTop()&&i>$(window).scrollTop()){var r=$(o).data("name"),f=$(o).data("number");e.text("0"+f),a.text(r)}}}):o(),r<10?i.text("0"+c.length):i.text(c.length)}()}(),function(){$(".go-to-top").each(function(){$(this).click(function(){return $("html, body").animate({scrollTop:0},"slow"),!1})})}(),function(){var t=$(".project");$(".project-page").length>0||t.on("mouseover",function(){var t=$(this);setTimeout(function(){t.find(".project__bg").fadeIn(500)},100),$(this).find(".project__canvas").css({boxShadow:"none",background:"none"})}).on("mouseleave",function(){function t(t,n){o.find(".project__canvas").css({boxShadow:"0 0 13px 1px "+t,backgroundColor:n})}var o=$(this);setTimeout(function(){o.find(".project__bg").fadeOut(500)},100),setTimeout(function(){o.hasClass("project-zernobot")&&t("#08171c","#194957"),o.hasClass("project-logbook")&&t("#f2f2f2","#f2f2f2"),o.hasClass("project-street-quests")&&t("#060606","#2c2c2c")},500)})}()}var o=$("#routerBlock");app.renderHome=function(){var n=function(t){o.append(t)};$.get(homeTemplateUrl).then(n).then(t)},app.renderHome(),app.navigation=function(){}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
