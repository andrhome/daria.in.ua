"use strict";$(document).ready(function(){!function(){AOS.init({easing:"ease"})}(),function(){function o(o){var t=$("#header");if(0!==o.length){var n=o.offset().top;$(window).scrollTop()>=n?t.addClass("fixed"):t.removeClass("fixed")}}$(window).scroll(function(){o($("#mainTitle")),o($(".fixed-header-flag"))})}(),function(){function o(o){o<10?e.text("0"+o):e.text(o)}function t(){var o=$(a[0]).data("name"),t=$(a[0]).data("number");e.text("0"+t),i.text(o)}function n(e){if($(a[e]).offset()){var c=$(a[e]).offset().top-250;if($(window).scrollTop()>c){var s=$(a[e]).data("name");o($(a[e]).data("number")),i.text(s),n(e+1)}}$(window).scrollTop()<f&&t()}$(window).on("scroll",function(){n(1)});var e=$("#currentSection"),i=$("#sectionName"),c=$("#sectionCount"),a=$(".site-section"),s=a.length,f=$(a[0]).height();!function(){$(window).scrollTop()>0&&$(window).scrollTop()>f?$.each(a,function(o,t){var n=$(t).offset().top;if(o+1<a.length){var c=$(a[o+1]).offset().top;if(n<=$(window).scrollTop()&&c>$(window).scrollTop()){var s=$(t).data("name"),f=$(t).data("number");e.text("0"+f),i.text(s)}}}):t(),s<10?c.text("0"+a.length):c.text(a.length)}()}(),function(){$(".go-to-top").each(function(){$(this).click(function(){return $("html, body").animate({scrollTop:0},"slow"),!1})})}(),function(){var o=$(".project");$(".project-page").length>0||o.on("mouseover",function(){var o=$(this);setTimeout(function(){o.find(".project__bg").fadeIn(500)},100),$(this).find(".project__canvas").css({boxShadow:"none",background:"none"})}).on("mouseleave",function(){function o(o,n){t.find(".project__canvas").css({boxShadow:"0 0 13px 1px "+o,backgroundColor:n})}var t=$(this);setTimeout(function(){t.find(".project__bg").fadeOut(500)},100),setTimeout(function(){t.hasClass("project-zernobot")&&o("#08171c","#194957"),t.hasClass("project-logbook")&&o("#f2f2f2","#f2f2f2"),t.hasClass("project-street-quests")&&o("#060606","#2c2c2c")},500)})}()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
